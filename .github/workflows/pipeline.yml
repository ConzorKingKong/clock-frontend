# This is a basic workflow to help you get started with Actions
name: pipeline

# Controls when the action will run. 
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: npm install

      - name: Execute Linter
        run: npm run lint
      # build and test the apps     
      - name: build
        run: |
          npm run build

  push_to_AWS_ECR:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      # build docker image and push to AWS ECR
      # only if the app build and test successfully
      needs: [build_test]

      steps:
        - name: checkout repo
          uses: actions/checkout@v2

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
      
        - name: Build
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ steps.login-ecr.outputs.registry }}/clock/frontend:latest
            platforms: linux/amd64,linux/arm64/v8
            build-args: |
              API_URL=${{ secrets.API_URL }}
        
        - name: Deploy to ECS
          run: |
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --force-new-deployment